name: Release fun-cli

# 触发条件：当推送以v开头的标签时触发（如v0.1.0、v1.2.3）
on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  # 跨平台构建任务
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: fun
            asset_name: fun-linux-x86_64
            archive_format: tar.gz
          # macOS x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: fun
            asset_name: fun-macos-x86_64
            archive_format: tar.gz
          # Windows x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: fun.exe
            asset_name: fun-windows-x86_64
            archive_format: zip

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }} --locked

      - name: Strip binary (非Windows平台)
        if: matrix.os != 'windows-latest'
        run: |
          strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

      - name: Prepare release assets
        shell: bash
        run: |
          # 创建临时目录
          mkdir -p release-artifacts
          
          # 复制二进制文件
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} release-artifacts/
          
          # 生成压缩包
          if [ "${{ matrix.archive_format }}" = "tar.gz" ]; then
            tar -czf ${{ matrix.asset_name }}.tar.gz -C release-artifacts ${{ matrix.artifact_name }}
          else
            7z a -tzip ${{ matrix.asset_name }}.zip ./release-artifacts/*
          fi
          
          # 生成校验和
          if [ "${{ runner.os }}" = "Windows" ]; then
            certutil -hashfile ${{ matrix.asset_name }}.${{ matrix.archive_format }} SHA256 | findstr /v "SHA256" | findstr /v "CertUtil" > ${{ matrix.asset_name }}.sha256
          else
            shasum -a 256 ${{ matrix.asset_name }}.${{ matrix.archive_format }} > ${{ matrix.asset_name }}.sha256
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: |
            ${{ matrix.asset_name }}.${{ matrix.archive_format }}
            ${{ matrix.asset_name }}.sha256

  # 发布任务
  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 需要发布权限
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史用于生成发布说明

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
          merge-multiple: true

      - name: Generate release notes
        id: release_notes
        run: |
          # 获取上一个标签和当前标签
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^)
          CURRENT_TAG=$(git describe --tags --abbrev=0 HEAD)
          
          # 生成发布说明
          echo "## What's new in $CURRENT_TAG" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### Changes since $PREV_TAG:" >> RELEASE_NOTES.md
          git log --pretty=format:"- %s" $PREV_TAG..$CURRENT_TAG >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### Installation" >> RELEASE_NOTES.md
          echo "Download the appropriate package for your platform and add to your PATH." >> RELEASE_NOTES.md
          echo "Verify the integrity with the provided SHA256 checksum." >> RELEASE_NOTES.md

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref_name }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
          files: |
            release-artifacts/*.tar.gz
            release-artifacts/*.zip
            release-artifacts/*.sha256

      - name: Notify on success
        if: success()
        run: |
          echo "Successfully created release ${{ github.ref_name }}"
